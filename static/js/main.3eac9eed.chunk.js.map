{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","subject","host","port","rooms","Name","LightOn","topic","client","messages","connected","startConnect","clientID","parseInt","Math","random","pahoMqtt","Client","Number","console","log","onConnectionLost","onMessageArrived","connect","onSuccess","onConnect","useSSL","setState","i","length","subscribe","responseObject","errorCode","errorMessage","changeLight","destination","payload","room_name","substring","indexOf","map","r","toggleLight","roomName","lightOn","find","r2","publish","message","payloadString","destinationName","startDisconnect","disconnect","Container","fluid","className","Row","Col","Button","variant","this","disabled","onClick","xs","type","name","id","checked","onChange","htmlFor","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3eac9eed.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { Component } from \"react\";\nimport pahoMqtt from \"paho-mqtt/paho-mqtt\";\nimport { Button, Col, Container, Row } from \"react-bootstrap\";\nclass App extends Component {\n  state = {\n    subject: \"VirtualSmartHome/\",\n    host: \"broker.emqx.io\",\n    port: \"8084\",\n    // host: \"broker.mqttdashboard.com\",\n    // port: \"8000\",\n    rooms: [\n      { Name: \"Bedroom\", LightOn: false },\n      { Name: \"Hallway\", LightOn: false },\n      { Name: \"Library\", LightOn: false },\n      { Name: \"Bathroom\", LightOn: false },\n      { Name: \"F1_Stairs\", LightOn: false },\n      { Name: \"LivingRoom\", LightOn: false },\n      { Name: \"Garage\", LightOn: false },\n      { Name: \"GF_Stairs\", LightOn: false },\n      { Name: \"Kitchen\", LightOn: false },\n      { Name: \"DiningRoom\", LightOn: false },\n      { Name: \"Basement\", LightOn: false },\n    ],\n    topic: \"\",\n    client: {},\n    messages: [],\n    connected: false,\n  };\n\n  // Called after form input is processed\n  startConnect = () => {\n    // Generate a random client ID\n    let clientID = \"clientID-\" + parseInt(Math.random() * 100);\n\n    const client = new pahoMqtt.Client(this.state.host, Number(this.state.port), clientID);\n    console.log(client);\n    // Initialize new Paho client connection\n\n    // Set callback handlers\n    client.onConnectionLost = this.onConnectionLost;\n    client.onMessageArrived = this.onMessageArrived;\n\n    // Connect the client, if successful, call onConnect function\n    client.connect({\n      onSuccess: this.onConnect,\n      useSSL: true,\n    });\n    this.setState({ client });\n  };\n\n  // Called when the client connects\n  onConnect = () => {\n    for (let i = 0; i < this.state.rooms.length; i++) {\n      let topic = `${this.state.subject}${this.state.rooms[i].Name}/Light`;\n      this.state.client.subscribe(topic);\n    }\n    this.setState({ connected: true });\n  };\n\n  // Called when the client loses its connection\n  onConnectionLost = (responseObject) => {\n    console.log(\"onConnectionLost: Connection Lost\");\n    if (responseObject.errorCode !== 0) {\n      console.log(\"onConnectionLost: \" + responseObject.errorMessage);\n    }\n    this.setState({ connected: false });\n  };\n\n  changeLight = (destination, payload) => {\n    let room_name = destination.substring(this.state.subject.length, destination.indexOf(\"/Light\"));\n    console.log(\"Payload\", payload);\n    console.log(\"Room Name\", room_name);\n    console.log(\"State\", this.state);\n    console.log(\"destination\", destination);\n    const rooms = this.state.rooms.map((r) => {\n      if (r.Name === room_name) {\n        r.LightOn = payload === \"1\";\n        console.log(\"Room\", r);\n      }\n      return r;\n    });\n    this.setState({ rooms });\n  };\n\n  toggleLight = (roomName) => {\n    if (!this.state.connected) return;\n    let lightOn = this.state.rooms.find((r2) => r2.Name === roomName).LightOn;\n\n    this.state.client.publish(`${this.state.subject}${roomName}/Light`, !lightOn ? \"1\" : \"0\", 0, true);\n  };\n\n  // Called when a message arrives\n  onMessageArrived = (message) => {\n    console.log(\"onMessageArrived: \" + message.payloadString);\n\n    this.changeLight(message.destinationName, message.payloadString);\n  };\n\n  // Called when the disconnection button is pressed\n  startDisconnect = () => {\n    this.state.client.disconnect();\n  };\n\n  render() {\n    return (\n      <Container fluid={true} className=\"text-center bg-dark text-light\">\n        <Row className=\"py-4\">\n          <Col>\n            <h1>Virtual Smart Home Controller</h1>\n          </Col>\n        </Row>\n        <Row className=\"my-5\">\n          <Col>\n            <Button\n              variant={this.state.connected ? \"success\" : \"danger\"}\n              disabled={this.state.connected}\n              onClick={() => this.startConnect()}\n            >\n              Connect\n            </Button>\n            <Button variant=\"primary\" disabled={!this.state.connected} onClick={() => this.startDisconnect()}>\n              Disconnect\n            </Button>\n          </Col>\n        </Row>\n        {this.state.rooms.map((r) => (\n          <Row key={r.Name}>\n            <Col xs=\"6\" className=\"text-right\">\n              {r.Name}\n            </Col>\n            <Col xs=\"2\">\n              <div className=\"toggleWrapper\">\n                <input\n                  type=\"checkbox\"\n                  name={`toggle_${r.Name}`}\n                  className=\"mobileToggle\"\n                  id={`toggle_${r.Name}`}\n                  checked={this.state.rooms.find((r2) => r2.Name === r.Name).LightOn}\n                  onChange={() => this.toggleLight(r.Name)}\n                />\n                <label htmlFor={`toggle_${r.Name}`}></label>\n              </div>\n            </Col>\n          </Row>\n        ))}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}