{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","subject","host","port","rooms","Name","displayStyle","topic","client","messages","connected","toggleConnect","console","log","startDisconnect","startConnect","clientID","parseInt","Math","random","pahoMqtt","Client","Number","onConnectionLost","onMessageArrived","connect","onSuccess","onConnect","useSSL","setState","i","length","subscribe","responseObject","errorCode","errorMessage","changeLight","destination","payload","room_name","substring","indexOf","map","r","LightOn","toggleLight","roomName","lightOn","find","r2","publish","message","payloadString","destinationName","disconnect","Container","fluid","className","Row","Col","Button","variant","this","onClick","xs","type","name","id","checked","onChange","htmlFor","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.19f100e0.chunk.js","sourcesContent":["import \"./App.css\";\r\nimport React, { Component } from \"react\";\r\nimport pahoMqtt from \"paho-mqtt/paho-mqtt\";\r\nimport { Button, Col, Container, Row } from \"react-bootstrap\";\r\nclass App extends Component {\r\n  state = {\r\n    subject: \"VirtualSmartHome/v2/\",\r\n    host: \"broker.emqx.io\",\r\n    port: \"8084\",\r\n    // host: \"broker.mqttdashboard.com\",\r\n    // port: \"8000\",\r\n    rooms: [\r\n      { Name: \"Bedroom_1\", displayStyle: \"block\" },\r\n      { Name: \"Bedroom_2\", displayStyle: \"block\" },\r\n      { Name: \"Bedroom_3\", displayStyle: \"block\" },\r\n      { Name: \"Hallway_1F\", displayStyle: \"block\" },\r\n      { Name: \"Bathroom_1F\", displayStyle: \"block\" },\r\n      { Name: \"Bathroom_GF\", displayStyle: \"block\" },\r\n      { Name: \"Kitchen\", displayStyle: \"block\" },\r\n      { Name: \"Stairs\", displayStyle: \"block\" },\r\n      { Name: \"Living_Room\", displayStyle: \"block\" },\r\n      { Name: \"Cloakroom\", displayStyle: \"block\" },\r\n    ],\r\n    topic: \"\",\r\n    client: {},\r\n    messages: [],\r\n    connected: false,\r\n  };\r\n\r\n  toggleConnect = () => {\r\n    if (this.state.connected) {\r\n      console.log(\"Disconnect\");\r\n      this.startDisconnect();\r\n    } else {\r\n      console.log(\"Connect\");\r\n      this.startConnect();\r\n    }\r\n  };\r\n\r\n  // Called after form input is processed\r\n  startConnect = () => {\r\n    // Generate a random client ID\r\n    let clientID = \"clientID-\" + parseInt(Math.random() * 100);\r\n\r\n    const client = new pahoMqtt.Client(\r\n      this.state.host,\r\n      Number(this.state.port),\r\n      clientID\r\n    );\r\n    console.log(client);\r\n    // Initialize new Paho client connection\r\n\r\n    // Set callback handlers\r\n    client.onConnectionLost = this.onConnectionLost;\r\n    client.onMessageArrived = this.onMessageArrived;\r\n\r\n    // Connect the client, if successful, call onConnect function\r\n    client.connect({\r\n      onSuccess: this.onConnect,\r\n      useSSL: true,\r\n    });\r\n    this.setState({ client });\r\n  };\r\n\r\n  // Called when the client connects\r\n  onConnect = () => {\r\n    for (let i = 0; i < this.state.rooms.length; i++) {\r\n      let topic = `${this.state.subject}${this.state.rooms[i].Name}/Light`;\r\n      this.state.client.subscribe(topic);\r\n    }\r\n    this.setState({ connected: true });\r\n  };\r\n\r\n  // Called when the client loses its connection\r\n  onConnectionLost = (responseObject) => {\r\n    console.log(\"onConnectionLost: Connection Lost\");\r\n    if (responseObject.errorCode !== 0) {\r\n      console.log(\"onConnectionLost: \" + responseObject.errorMessage);\r\n    }\r\n    this.setState({ connected: false });\r\n  };\r\n\r\n  changeLight = (destination, payload) => {\r\n    let room_name = destination.substring(\r\n      this.state.subject.length,\r\n      destination.indexOf(\"/Light\")\r\n    );\r\n    console.log(\"Payload\", payload);\r\n    console.log(\"Room Name\", room_name);\r\n    console.log(\"State\", this.state);\r\n    console.log(\"destination\", destination);\r\n    const rooms = this.state.rooms.map((r) => {\r\n      if (r.Name === room_name) {\r\n        r.LightOn = payload === \"1\";\r\n        console.log(\"Room\", r);\r\n      }\r\n      return r;\r\n    });\r\n    this.setState({ rooms });\r\n  };\r\n\r\n  toggleLight = (roomName) => {\r\n    if (!this.state.connected) return;\r\n    let lightOn = this.state.rooms.find((r2) => r2.Name === roomName).LightOn;\r\n\r\n    this.state.client.publish(\r\n      `${this.state.subject}${roomName}/Light`,\r\n      !lightOn ? \"1\" : \"0\",\r\n      0,\r\n      true\r\n    );\r\n  };\r\n\r\n  // Called when a message arrives\r\n  onMessageArrived = (message) => {\r\n    console.log(\"onMessageArrived: \" + message.payloadString);\r\n\r\n    this.changeLight(message.destinationName, message.payloadString);\r\n  };\r\n\r\n  // Called when the disconnection button is pressed\r\n  startDisconnect = () => {\r\n    this.state.client.disconnect();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container fluid={true} className=\"text-center bg-dark text-light\">\r\n        <Row className=\"py-4\">\r\n          <Col>\r\n            <h1>Connected Homes Controller</h1>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"my-5\">\r\n          <Col>\r\n            <Button\r\n              variant={this.state.connected ? \"danger\" : \"success\"}\r\n              // disabled={this.state.connected}\r\n              onClick={() => this.toggleConnect()}\r\n            >\r\n              {this.state.connected ? \"Disconnect\" : \"Connect\"}\r\n            </Button>\r\n            {/* <Button\r\n              variant=\"primary\"\r\n              disabled={!this.state.connected}\r\n              onClick={() => this.startDisconnect()}\r\n            >\r\n              Disconnect\r\n            </Button> */}\r\n          </Col>\r\n        </Row>\r\n        {this.state.rooms.map((r) => (\r\n          <Row key={r.Name}>\r\n            <Col xs=\"6\" className=\"text-right\">\r\n              {r.Name}\r\n            </Col>\r\n            <Col xs=\"2\">\r\n              <div className=\"toggleWrapper\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  name={`toggle_${r.Name}`}\r\n                  className=\"mobileToggle\"\r\n                  id={`toggle_${r.Name}`}\r\n                  checked={\r\n                    this.state.rooms.find((r2) => r2.Name === r.Name).LightOn\r\n                  }\r\n                  onChange={() => this.toggleLight(r.Name)}\r\n                />\r\n                <label htmlFor={`toggle_${r.Name}`}></label>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        ))}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}